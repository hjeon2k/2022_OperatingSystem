[       vector.c:                          main] reset
[         init.c:                  _os_init_hal] initializing hal module.
[    interrupt.c:            _os_init_icb_table] initializing interrupt module.
[    scheduler.c:            _os_init_scheduler] initializing scheduler module.
[         task.c:                 _os_init_task] initializing task module.
[    interrupt.c:     eos_set_interrupt_handler] irqnum: 0, handler: 0x804910b, arg: 0x0
[         main.c:            _os_initialization] creating idle task.
[         main.c:            _os_initialization] finishing initialization. starting multitasking.
[         work.c:                receiver_task1] receive message from mq1
[         sync.c:         eos_acquire_semaphore] Add to Q
[         work.c:                receiver_task2] receive message from mq2
[         sync.c:         eos_acquire_semaphore] Add to Q
[         work.c:                   sender_task] send message to mq1
[         sync.c:         eos_release_semaphore] Remove from Q
[         work.c:                   sender_task] send message to mq2
[         sync.c:         eos_release_semaphore] Remove from Q
[         work.c:                receiver_task1] received message: xy
[         work.c:                receiver_task2] received message: xy
[        timer.c:           eos_trigger_counter] tick 0
[        timer.c:           eos_trigger_counter] tick 1
[         work.c:                   sender_task] send message to mq1
[         work.c:                   sender_task] send message to mq2
[        timer.c:           eos_trigger_counter] tick 2
[        timer.c:           eos_trigger_counter] tick 3
[         work.c:                receiver_task1] receive message from mq1
[         work.c:                receiver_task1] received message: xy
[         work.c:                   sender_task] send message to mq1
[         work.c:                   sender_task] send message to mq2
[        timer.c:           eos_trigger_counter] tick 4
[        timer.c:           eos_trigger_counter] tick 5
[         work.c:                receiver_task2] receive message from mq2
[         work.c:                receiver_task2] received message: xy
[         work.c:                   sender_task] send message to mq1
[         work.c:                   sender_task] send message to mq2
[        timer.c:           eos_trigger_counter] tick 6
[        timer.c:           eos_trigger_counter] tick 7
[         work.c:                receiver_task1] receive message from mq1
[         work.c:                receiver_task1] received message: xy
[         work.c:                   sender_task] send message to mq1
[         work.c:                   sender_task] send message to mq2
[        timer.c:           eos_trigger_counter] tick 8
[        timer.c:           eos_trigger_counter] tick 9
[         work.c:                   sender_task] send message to mq1
[         work.c:                   sender_task] send message to mq2
[        timer.c:           eos_trigger_counter] tick 10
[        timer.c:           eos_trigger_counter] tick 11
[         work.c:                receiver_task1] receive message from mq1
[         work.c:                receiver_task1] received message: xy
[         work.c:                receiver_task2] receive message from mq2
[         work.c:                receiver_task2] received message: xy
[         work.c:                   sender_task] send message to mq1
[         work.c:                   sender_task] send message to mq2
[        timer.c:           eos_trigger_counter] tick 12
[        timer.c:           eos_trigger_counter] tick 13
[         work.c:                   sender_task] send message to mq1
[         work.c:                   sender_task] send message to mq2
[        timer.c:           eos_trigger_counter] tick 14
[        timer.c:           eos_trigger_counter] tick 15
[         work.c:                receiver_task1] receive message from mq1
[         work.c:                receiver_task1] received message: xy
[         work.c:                   sender_task] send message to mq1
[      